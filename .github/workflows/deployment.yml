name: deployment

on: deployment

jobs:
  deploy:
    permissions:
      contents: write
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: set create deployment status=in_progress
        uses: actions/github-script@v6
        with:
          script: |
            const runUrl = `${context.serverUrl}/${context.payload.repository.full_name}/actions/runs/${context.runId}`

            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "in_progress",
              deployment_id: context.payload.deployment.id,
              log_url: runUrl,
              auto_inactive: false
            });

      - name: attempt to get the release
        uses: actions/github-script@v6
        id: get-release
        with:
          script: |
            const getRelease = async (sha, page = 0) => {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                page,
              });
              const r = releases.find((r) => r.target_commitish === sha);
              if (r) return r;
              if (release.length === 100) return getRelease(sha, page + 1);
            };

            const release = await getRelease(context.payload.deployment.sha);

            if (release) {
              const [{ url }] = await fetch(release.assets_url).then((res) => res.json());
              core.setOutput("app-assets-url", url);
            } else {
              core.setOutput("app-assets-url", "");
            }

      - name: get app assets
        if: steps.get-release.outputs.app-assets-url != ''
        run: |
          wget ${{ steps.get-release.outputs.app-assets-url }} -o app-assets.tar.gz
          mkdir dist
          tar -xv -f app-assets.tar.gz -C dist

      - uses: actions/checkout@v3
        if: steps.get-release.outputs.app-assets-url == ''
        with:
          fetch-depth: 0
          ref: ${{ github.event.deployment.sha }}

      - name: build
        if: steps.get-release.outputs.app-assets-url == ''
        run: npm run build
        env:
          ENV_NAME: ${{ github.event.deployment.environment }}

      - name: deploy
        run: cat dist/app.txt

      - name: set create deployment status=success
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "success",
              deployment_id: context.payload.deployment.id,
              auto_inactive: true,
              environment_url: "https://example.com"
            });

      - name: set create deployment status=failure
        uses: actions/github-script@v6
        if: ${{ failure() }}
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "failure",
              deployment_id: context.payload.deployment.id
            });
