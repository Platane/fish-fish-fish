name: deployment

on: deployment

jobs:
  deploy:
    permissions:
      contents: write
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: set create deployment status=in_progress
        uses: actions/github-script@v6
        with:
          script: |
            const runUrl = `${context.serverUrl}/${context.payload.repository.full_name}/actions/runs/${context.runId}`

            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "in_progress",
              deployment_id: context.payload.deployment.id,
              log_url: runUrl,
              auto_inactive: false
            });

      - name: attempt to get the release
        uses: actions/github-script@v6
        with:
          script: |

            console.log( JSON.stringify( Object.keys(github.rest.repos) ) )


             const r = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              console.log(r)


            try{




              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: context.payload.deployment.sha
              });

             


              console.log(release)
            }catch(err){
              core.setOutput('found', 'false');
            }

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.deployment.sha }}

      - name: build
        run: |
          mkdir dist
          cat app.txt >> dist/app.txt
          echo "app: $ENV_NAME" >> dist/app.txt

          cat dist/app.txt
        env:
          ENV_NAME: ${{ github.event.deployment.environment }}

      - name: deploy
        run: cat dist/app.txt

      - name: set create deployment status=success
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "success",
              deployment_id: context.payload.deployment.id,
              auto_inactive: true,
              environment_url: "https://example.com"
            });

      - name: set create deployment status=failure
        uses: actions/github-script@v6
        if: ${{ failure() }}
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "failure",
              deployment_id: context.payload.deployment.id
            });
